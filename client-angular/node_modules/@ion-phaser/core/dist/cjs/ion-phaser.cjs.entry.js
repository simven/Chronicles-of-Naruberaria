'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('./core-b16b4f25.js');

const IonPhaser = class {
    constructor(hostRef) {
        core.registerInstance(this, hostRef);
        /**
         * To initialize the plugin manually
         */
        this.initialize = true;
        this.initializeGame = (game = this.game) => {
            if (!game)
                return;
            if (game.instance) {
                throw new Error("A Phaser game already exist");
            }
            game.parent = game.parent || this.el;
            game.instance = new Phaser.Game(game);
        };
    }
    onGameChange(game) {
        if (this.initialize && !this.getGameInstance()) {
            this.initializeGame(game);
        }
    }
    onInitialize(initialize) {
        if (initialize && !this.getGameInstance()) {
            this.initializeGame();
        }
    }
    /**
     * Get the Phaser game instance
     */
    async getInstance() {
        return Promise.resolve(this.getGameInstance());
    }
    /**
     * Destroy the Phaser game instance
     */
    async destroy() {
        if (this.getGameInstance()) {
            this.game.instance.destroy(true);
            this.game.instance = null;
        }
    }
    componentWillLoad() {
        if (!this.getGameInstance() && this.initialize) {
            this.initializeGame();
        }
    }
    componentDidUnload() {
        this.destroy();
    }
    getGameInstance() {
        return this.game && this.game.instance;
    }
    get el() { return core.getElement(this); }
    static get watchers() { return {
        "game": ["onGameChange"],
        "initialize": ["onInitialize"]
    }; }
    static get style() { return "ion-phaser{display:block}"; }
};

exports.ion_phaser = IonPhaser;
